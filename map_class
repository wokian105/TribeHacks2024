class Map:
    def __init__(self):
        self.building_dictionary = {}
        self.start = None
        self.path = []
        self.head = None #for starting the proccess of building the graph
    
    def add_building(self, building_name, series_of_buildings_connected, length, position, connects_to = None):
            """innitializes a building node and connects it to other buildings format: 'building', 'connected_building, ...', 'length'"""
            if connects_to == None:
                newnode = self.Node(position)
                self.building_dictionary[f"{building_name}"] = newnode
            else:
                newnode = self.Node(position)
                edges_of_connected_to = self.building_dictionary[connects_to].connected_edges
                for edge in edges_of_connected_to:
                    if edge.node2 == building_name:
                        edge.node2 = newnode
                        self.building_dictionary[building_name] = newnode
                        edge.node2.connected_edges.append(edge)
            #add to dictionary
            connected_buildings = series_of_buildings_connected.split(", ")
            for i in range(len(connected_buildings)):
                building = connected_buildings[i]
                newedge = self.Edge(newnode, building, length)
                newnode.connected_edges.append(newedge)            

    def add_connection(self, node1, node2, length):
        node1 = self.building_dictionary[node1]
        node2 = self.building_dictionary[node2]
        newedge = self.Edge(node1, node2, length)
        node1.connected_edges.append(newedge)
        node2.connected_edges.append(newedge)
        
    def search(self, entrance, target):
        start = self.building_dictionary[entrance]
        seen = []
        at = [start]
        going = []
        while len(at) != 0:
            for current in at:
                for edge in current.connected_edges:
                    seenvalue = edge.walk_to_next_node(current)
                    if seenvalue.total_length_walked > edge.legth + current.total_length or seenvalue.total_length_walked == 0:
                        going.append(seenvalue)
                        seenvalue.back = current
                seen.append(current)
                at.remove(current)

    class Node:
        def __init__(self, position):
            self.connected_edges = []
            self.coordinates = position
            self.back = None
            self.total_length_walked = 0
        
    class Edge:
        def __init__(self, node1, node2, length):
            self.node1 = node1
            self.node2 = node2
            self.length = length

        def walk_to_next_node(self, node):
            """walks to the other node in an edge and gives the length"""
            if node == self.node1:
                if self.node2.total_length_walked > self.node1.total_length_walked + self.length or self.node2.total_length_walked == 0:
                    self.node2.total_length_walked += self.length
                    self.back = node
                return (self.node2)
            else:
                if self.node1.total_length_walked > self.node2.total_length_walked + self.length or self.node1.total_length_walked == 0:
                    self.node1.total_length_walked += self.length
                    self.back = node
                return (self.node1)
        
"""testing"""
Sunken_Garden = Map()
#Sunken Gardens
Sunken_Garden.add_building("Wren", "Ewell, Tucker", 30, "Wren*")
Sunken_Garden.add_building("Ewell", "Washington", 30, "Ewell*", "Wren")
Sunken_Garden.add_building("Tucker", "Chancellor", 30, "Tucker*", "Wren")
Sunken_Garden.add_connection("Tucker", "Ewell", 30)
Sunken_Garden.add_building("Chancellor", "Blair", 30, "Chancellor*", "Tucker")
Sunken_Garden.add_building("Blair", "Sadler", 30, "Blair*", "Chancellor")
Sunken_Garden.add_building("Washington", "McGlothlin", 30, "Washington*", "Ewell")
Sunken_Garden.add_building("McGlothlin", "ISC", 30, "McGlothlin*", "Washington")
Sunken_Garden.add_connection("Chancellor", "Washington", 30)
Sunken_Garden.add_connection("Blair", "McGlothlin", 30)
test = input("type a bulding name ")
print(Sunken_Garden.building_dictionary)
for i in Sunken_Garden.building_dictionary[test].connected_edges:
    if isinstance(i.node1, str):
        print(i.node1)
    else:
        print(i.node1.coordinates)
    if isinstance(i.node2, str):
        print(i.node2)
    else:
        print(i.node2.coordinates)
